#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <string>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#pragma comment(linker, "/STACK:102400000,102400000")
using namespace std;
struct Edge
{
    int from,to,tag;
};

int n,m,dfn[200000+5],low[200000+5],vis[200000+5],dep,num,p[200000+5],bin[200000+5],deep[200000+5];
vector<Edge>edges;
vector<int>G[200000+5];
vector<int>g[200000+5];

void AddEdge(int from,int to)
{
    int i,flag=0;
    for(i=0; i<G[from].size(); i++)
        if(edges[G[from][i]].to==to)
        {
            edges[G[from][i]].tag++;
            flag=1;
            break;
        }
    if(!flag)
    {
        Edge tp;
        tp.from=from;
        tp.to=to;
        tp.tag=0;
        edges.push_back(tp);
        G[from].push_back(edges.size()-1);
    }
}

void dfs(int u,int fa)
{
    dfn[u]=low[u]=++dep;
    for(int i=0; i<G[u].size(); i++)
    {
        Edge t=edges[G[u][i]];
        if(!vis[t.to])
        {
            vis[t.to]=1;
            dfs(t.to,u);
            low[u]=min(low[u],low[t.to]);
            if(low[t.to]>dfn[u]&&!t.tag)
            {
                g[u].push_back(t.to);
                g[t.to].push_back(u);
                num++;
            }
        }
        else if(t.to!=fa||t.tag)
            low[u]=min(low[u],dfn[t.to]);
    }
}

void dfs2(int u,int bcc)
{
    p[u]=bcc;
    for(int i=0; i<G[u].size(); i++)
    {
        int to=edges[G[u][i]].to;
        bool f=true;
        for(int j=0; j<g[u].size(); j++)
        {
            int v=g[u][j];
            if(v==to)
            {
                f=false;
                break;
            }
        }
        if(!f||vis[to]) continue;
        vis[to]=1;
        dfs2(to,bcc);
    }
}

void dfs3(int u,int fa)
{
    deep[u]=fa;
    for()
}

void find_bcc()
{
    memset(vis,0,sizeof(vis));
    num=dep=0;
    for(int i=1; i<=n; i++)
    {
        if(!vis[i])
        {
            vis[i]=1;
            dfs(i,-1);
        }
    }
}

int Find(int x)
{
    if(bin[x]==x) return x;
    else return bin[x]=Find(bin[x]);
}

void Union(int x,int y)
{
    int fx=Find(x),fy=Find(y);
    if(fx>fy)
        bin[fx]=fy;
    else if(fx<fy)
        bin[fy]=fx;
}

int lca(int u,int v)
{

    return u;
}

int main()
{
    int _=0,i,u,v,ans,bcc;
    scanf("%d",&_);
    while(~scanf("%d%d",&n,&m))
    {
        if(n==0&m==0) break;
        edges.clear();
        for(i=0; i<=n; i++)
        {
            G[i].clear();
            g[i].clear();
        }
        for(i=1; i<=m; i++)
        {
            scanf("%d%d",&u,&v);
            AddEdge(u,v);
            Addedge(v,u);
        }
        find_bcc();
        memset(vis,0,sizeof(vis));
        memset(p,0xff,sizeof(p));
        memset(deep,0,sizeof(deep));
        bcc=0;
        for(i=1; i<=n; i++)
        {
            if(!vis[i])
            {
                bcc++;
                vis[i]=1;
                dfs2(i,bcc);
            }
        }
        for(i=0;i<=n;i++)
            G[i].clear();
        for(i=1;i<=n;i++)
            for(j=0;j<g[i].size();j++)
            {
                v=g[i][j];
                if(p[v]!=p[i])
                    G[p[i]].push_back(p[v]);
            }

        for(i=1;i<=bcc;i++)
            bin[i]=i;
        memset(vis,0,sizeof(vis));
        dfs3(1,-1);
        scanf("%d",&m);
        printf("Case %d:\n",++_);
        for(i=0;i<m;i++)
        {
            scanf("%d%d",&u,&v);
            u=Find(p[u]);
            v=Find(p[v]);
            if(u==v)    {printf("0\n");continue;}
            int t=u,v;
        }
    }
    return 0;
}
